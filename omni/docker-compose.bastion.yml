version: '3.8'

# Bastion-Omni: Complete self-contained deployment
# This compose file includes Omni and all its dependencies for a bootstrap-ready setup

services:
  # Reverse Proxy and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: bastion-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"    # Nginx status/admin
      - "8090:8090"    # Omni Machine API
      - "8100:8100"    # Omni K8s Proxy
      - "50180:50180/udp"  # WireGuard
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./omni/tls.crt:/etc/nginx/ssl/default.crt:ro
      - ./omni/tls.key:/etc/nginx/ssl/default.key:ro
      - nginx_logs:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - omni
    networks:
      - omni-network

  # SSL Certificate Management
  certbot:
    image: certbot/dns-digitalocean:latest
    container_name: bastion-certbot
    restart: "no"
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_logs:/var/log/letsencrypt
      - ./certbot:/etc/certbot:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DIGITALOCEAN_TOKEN=${DNS_DIGITALOCEAN_TOKEN:-}
    command: >
      sh -c "if [ ! -f /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem ]; then
        certbot certonly --dns-digitalocean
        --dns-digitalocean-credentials /etc/certbot/digitalocean.ini
        --email ${CERT_EMAIL}
        --agree-tos
        --non-interactive
        -d ${DOMAIN_NAME}
        -d '*.${DOMAIN_NAME}';
      else
        echo 'Certificates already exist';
      fi"
    networks:
      - omni-network
    profiles:
      - certbot

  # Identity Provider - Keycloak (if using SAML)
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: bastion-keycloak
    restart: unless-stopped
    command: start --optimized
    environment:
      # Database
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      
      # Keycloak Admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      
      # Proxy and Hostname
      KC_PROXY: edge
      KC_HOSTNAME: keycloak.${DOMAIN_NAME}
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      
      # Features
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      KC_HTTP_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
    volumes:
      - keycloak_data:/opt/keycloak/data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - omni-network
    profiles:
      - saml

  # Database for Keycloak and other services
  postgres:
    image: postgres:15-alpine
    container_name: bastion-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - omni-network
    profiles:
      - saml

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: bastion-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - omni-network

  # DNS Server for internal resolution
  pihole:
    image: pihole/pihole:latest
    container_name: bastion-pihole
    restart: unless-stopped
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    environment:
      TZ: ${TZ:-UTC}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      PIHOLE_DNS_: 1.1.1.1;8.8.8.8
      DNSMASQ_LISTENING: all
      VIRTUAL_HOST: pihole.${DOMAIN_NAME}
    volumes:
      - pihole_etc:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
      - /etc/localtime:/etc/localtime:ro
    cap_add:
      - NET_ADMIN
    networks:
      - omni-network
    profiles:
      - dns

  # Container Registry for storing images
  registry:
    image: registry:2
    container_name: bastion-registry
    restart: unless-stopped
    environment:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: '[*]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: '[HEAD,GET,OPTIONS,DELETE]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: '[Authorization,Accept,Cache-Control]'
    volumes:
      - registry_data:/var/lib/registry
      - ./registry/auth:/auth:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - registry

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bastion-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: bastion-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN_NAME}
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - monitoring

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: bastion-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./loki:/etc/loki:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - monitoring

  # NTP Server for time synchronization
  ntp:
    image: cturra/ntp:latest
    container_name: bastion-ntp
    restart: unless-stopped
    ports:
      - "123:123/udp"
    environment:
      NTP_SERVERS: time.cloudflare.com,pool.ntp.org
      LOG_LEVEL: 0
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - ntp

  # DHCP Server (optional for network bootstrap)
  dhcp:
    image: networkboot/dhcpd:latest
    container_name: bastion-dhcp
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
    volumes:
      - ./dhcp/dhcpd.conf:/etc/dhcp/dhcpd.conf:ro
      - dhcp_leases:/var/lib/dhcp
      - /etc/localtime:/etc/localtime:ro
    profiles:
      - dhcp

  # TFTP Server for PXE boot
  tftp:
    image: pghalliday/tftp
    container_name: bastion-tftp
    restart: unless-stopped
    ports:
      - "69:69/udp"
    volumes:
      - tftp_data:/var/tftpboot
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - pxe

  # HTTP Server for serving boot files
  nginx-boot:
    image: nginx:alpine
    container_name: bastion-nginx-boot
    restart: unless-stopped
    volumes:
      - tftp_data:/usr/share/nginx/html:ro
      - ./nginx/boot.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    profiles:
      - pxe

  # Omni - Main Kubernetes Management Platform
  omni:
    image: "ghcr.io/siderolabs/omni:${OMNI_VERSION:-latest}"
    container_name: bastion-omni
    restart: unless-stopped
    devices:
      - /dev/net/tun
    cap_add:
      - NET_ADMIN
    environment:
      # Core configuration
      OMNI_ACCOUNT_UUID: ${OMNI_ACCOUNT_UUID}
      OMNI_NAME: ${OMNI_NAME:-omni}
      
      # Network configuration
      OMNI_BIND_ADDR: 0.0.0.0:8443
      OMNI_MACHINE_API_BIND_ADDR: 0.0.0.0:8090
      OMNI_K8S_PROXY_BIND_ADDR: 0.0.0.0:8100
      
      # URLs and advertisements
      OMNI_ADVERTISED_API_URL: https://${DOMAIN_NAME}
      OMNI_SIDEROLINK_API_ADVERTISED_URL: https://${DOMAIN_NAME}:8090/
      OMNI_ADVERTISED_K8S_PROXY_URL: https://${DOMAIN_NAME}:8100/
      OMNI_SIDEROLINK_WIREGUARD_ADVERTISED_ADDR: ${WG_IP:-10.10.1.100}:50180
      
      # Authentication
      OMNI_AUTH_AUTH0_ENABLED: ${AUTH0_ENABLED:-false}
      OMNI_AUTH_AUTH0_DOMAIN: ${AUTH0_DOMAIN:-}
      OMNI_AUTH_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-}
      OMNI_AUTH_SAML_ENABLED: ${SAML_ENABLED:-false}
      OMNI_AUTH_SAML_URL: ${SAML_URL:-}
      
      # Users
      OMNI_INITIAL_USERS: ${ADMIN_EMAIL}
      
      # Storage and encryption
      OMNI_PRIVATE_KEY_SOURCE: file:///omni.asc
      OMNI_EVENT_SINK_PORT: 8091
    volumes:
      - omni_etcd:/etcd
      - ./omni/omni.asc:/omni.asc:ro
      - ./omni/tls.crt:/tls.crt:ro
      - ./omni/tls.key:/tls.key:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - omni-network
    depends_on:
      - nginx
      - redis

volumes:
  # Nginx
  nginx_logs:
    driver: local
    
  # SSL Certificates
  certbot_certs:
    driver: local
  certbot_logs:
    driver: local
    
  # Database
  postgres_data:
    driver: local
  redis_data:
    driver: local
    
  # Identity
  keycloak_data:
    driver: local
    
  # DNS
  pihole_etc:
    driver: local
  pihole_dnsmasq:
    driver: local
    
  # Registry
  registry_data:
    driver: local
    
  # Monitoring
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
    
  # Network Services
  dhcp_leases:
    driver: local
  tftp_data:
    driver: local
    
  # Omni
  omni_etcd:
    driver: local

networks:
  omni-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
